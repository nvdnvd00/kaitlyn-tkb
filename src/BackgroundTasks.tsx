import { isFuture } from 'date-fns';
import React, { useEffect } from 'react';
import BackgroundFetch from 'react-native-background-fetch';
import PushNotification from 'react-native-push-notification';
import { useSelector } from 'react-redux';
import { RootReducer } from 'store/reducer';
import { getFullSchedule, getScheduleByDay } from './helper/utils';

export const BackgroundTasks = (props: any) => {
	const time = new Date();
	const { data: fullSubjects } = useSelector((state: RootReducer) => state.subject);
	const { data: caData } = useSelector((state: RootReducer) => state.ca);
	const todaySubjects = getScheduleByDay(caData, fullSubjects, time);
	const x = getFullSchedule(caData, fullSubjects, new Date(), new Date(1620579599000));
	const nextSubject = x.find((i: any) => {
		return isFuture(i.todayTime.begin);
	});
	useEffect(() => {
		BackgroundFetch.configure(
			{
				minimumFetchInterval: 15,
			},
			async (taskId) => {
				console.log('Received background-fetch event: ' + taskId);
				pushNoti();
				/* process background tasks */

				BackgroundFetch.finish(taskId);
			},
			(error) => {
				console.log('RNBackgroundFetch failed to start');
			},
		);
	}, []);
	const pushNoti = () => {
		// if (!nextSubject) return;
		const msg = `Môn: ${nextSubject.name}\nPhòng: ${nextSubject?.todayTime.room} (${nextSubject?.todayTime.caIdInfo.start} ~ ${nextSubject?.todayTime.caIdInfo.end})`;
		PushNotification.localNotification({
			/* Android Only Properties */
			// ticker: 'My Notification Ticker', // (optional)
			// autoCancel: true, // (optional) default: true
			// largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
			// smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
			// bigText: 'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
			// subText: 'This is a subText', // (optional) default: none
			// color: 'red', // (optional) default: system default
			// vibrate: true, // (optional) default: true
			// vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
			// tag: 'some_tag', // (optional) add tag to message
			// group: 'group', // (optional) add group to message
			// ongoing: false, // (optional) set whether this is an "ongoing" notification
			// actions: ['Yes', 'No'], // (Android only) See the doc for notification actions to know more
			// invokeApp: true, // (optional) This enable click on actions to bring back the application to foreground or stay in background, default: true

			/* iOS only properties */
			alertAction: 'view', // (optional) default: view
			category: '', // (optional) default: empty string

			/* iOS and Android properties */
			// id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
			title: `Tới giờ đi học`, // (optional)
			message: msg, // (required)
			// userInfo: { screen: 'home' }, // (optional) default: {} (using null throws a JSON value '<null>' error)
			soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
		});
	};
	return <>{props.children}</>;
};
